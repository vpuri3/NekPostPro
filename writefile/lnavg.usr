c-----------------------------------------------------------------------
c     Averages over two homogeneous directions.
c
c     BASED ON plavg.usr. Relies on lexicographical element
c     and node ordering.
c-----------------------------------------------------------------------
c
c     call line_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir)
c
c     ua: averaged field, u: field to average
c
c     idir=1 ==> average over y-z plane i.e. get X-profile.
c     idir=2 ==> average over x-z plane i.e. get Y-profile.
c     idir=3 ==> average over x-y plane i.e. get Z-profile.
c
c-----------------------------------------------------------------------
c From userchk()
c
c     integer gs_avg_hndl
c     save    gs_avg_hndl
c     data    gs_avg_hndl / 0 /
c
c     real u  (lx1,ly1,lz1,lelt) ! some field
c    $    ,uya(lx1,ly1,lz1,lelt) ! Y-profile of u.
c
c     nelx = 128
c     nely = 32
c     nelz = 64
c     ifld = 1  ! velocity field
c     idir = 2  ! avg over X-Z plane
c
c     call line_avg_tensor(uya,u,gs_avg_hndl,nelx,nely,nelz,ifld,idir)
c
c-----------------------------------------------------------------------
      subroutine line_avg_wrapper(u,gs_hndl,nelx,nely,nelz,ifld,idir)
      include 'SIZE'
      include 'TOTAL'
      real u(lx1*ly1*lz1*lelt)
      real w1(lx1*ly1*lz1*lelt)
      integer nt

      nt = lx1*ly1*lz1*nelt

      call line_avg_tensor(w1,u,gs_hndl,nelx,nely,nelz,ifld,idir)

      call rzero(u,nt)

      do i=1,nt
         u(i) = w1(i)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine line_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir)
      include 'SIZE'
      include 'TOTAL'
      real u (lx1,ly1,lz1,lelt)
      real ua(lx1,ly1,lz1,lelt)
      integer gs_hndl,e,ex,ey,ez,eg
c     common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
c     integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      n   = nx1*ny1*nz1*nel

      call rzero(ua,n)

      if (gs_hndl.eq.0) then

      if (idir.eq.1) call set_gs_xline_hndl(gs_hndl,nelx,nely,nelz,ifld)
      if (idir.eq.2) call set_gs_yline_hndl(gs_hndl,nelx,nely,nelz,ifld)
      if (idir.eq.3) call set_gs_zline_hndl(gs_hndl,nelx,nely,nelz,ifld)

      endif

c     VERIFIED global numbering
c     do i=1,n
c         ua(i,1,1,1) = glo_num(i,1,1,1)
c     enddo

      call copy(ua,bm1,n)                 ! Set the averaging weights
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weights over columns
 
      do i=1,n                            ! ua = (w_j*u_j)/( sum_i w_i)
         ua(i,1,1,1) = bm1(i,1,1,1)*u(i,1,1,1)/ua(i,1,1,1)
      enddo
 
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weighted values

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_xline_hndl(gs_avg_hndl,nelx,nely,nelz,ifld)
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       ex_g = ey       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points along x
       do j=1,ny1
       do i=1,nx1
c         glo_num(i,j,k,e) = ex
          glo_num(i,j,k,e) = i + (ex-1)*(nx1-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_yline_hndl(gs_avg_hndl,nelx,nely,nelz,ifld)
c     Set the y-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       ex_g = (ez-1)*nelx+ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-z plane
       do j=1,ny1
       do i=1,nx1
c         glo_num(i,j,k,e) = ey
          glo_num(i,j,k,e) = j + (ey-1)*(ny1-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_zline_hndl(gs_avg_hndl,nelx,nely,nelz,ifld)
c     Set the z-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)            
       ex_g = ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-y plane
       do j=1,ny1
       do i=1,nx1
c         glo_num(i,j,k,e) = ez
          glo_num(i,j,k,e) = k + (ez-1)*(nz1-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
