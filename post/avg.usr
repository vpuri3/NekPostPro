c-----------------------------------------------------------------------
c AVERAGING ROUTINES
c
c Averages over two homogeneous directions.
c
c Relies on lexicographical element ordering.
c
c-----------------------------------------------------------------------
c
c  in usrchk()
c
c     integer nelx,nely,nelz,ifld
c     integer idir_plnr,idir_line,idir_geom,atyp

c     integer gs_plnr_hndl
c     save    gs_plnr_hndl
c     data    gs_plnr_hndl / 0 /

c     integer gs_line_hndl
c     save    gs_line_hndl
c     data    gs_line_hndl / 0 /

c     integer gs_geom_hndl
c     save    gs_geom_hndl
c     data    gs_geom_hndl / 0 /

c     nelx       = 64
c     nely       = 24
c     nelz       = 32
c     ifld       = 1
c     idir_line  = 2
c     idir_plnr  = 3
c     idir_geom  = 1
c     avgtyp     = 0 ! -ve: plnr, 0: line, mag>1: nrep for geomavg

c     call avg_tensor(vxa,vx,gs_line_hndl,gs_geom_hndl,nelx,nely,nelz
c    $            ,ifld,idir_line,idir_geom,atyp)
c
c-----------------------------------------------------------------------
      subroutine avg_3d(ua,u)
      include 'SIZE'
      include 'TOTAL'
      real ua

      real vol
      integer nt

      nt  = lx1*ly1*lz1*nelv
      vol = glsum(bm1,nt)
      ua  = glsc2(bm1,u,nt)/vol

      if(nid.eq.0) then
        write(6,258)'ua:',ua
      endif

 258  format(a6,1es15.8)

      return
      end
c-----------------------------------------------------------------------
      subroutine avg_tensor(ua,u,gs_hndl1,gs_hndl2,nelx,nely,nelz,ifld
     $                  ,idir1,idir2,atyp)
      include 'SIZE'
      include 'TOTAL'

      integer nelx,nely,nelz,ifld
      integer gs_hndl1,gs_hndl2,idir1,idir2
      integer atyp

      integer at

      if(nid.eq.0) write(6,*) "in avg_tensor(...)"

      if(atyp.lt.0) then
       if(nid.eq.0) write(6,*) "Planar averaging in direction ",idir1

       call plane_avg_tensor(ua,u,gs_hndl1,nelx,nely,nelz,ifld,idir1)

      endif
      if(atyp.eq.0) then
       if(nid.eq.0) write(6,*) "Line averaging in direction ",idir1
 
       call line_avg_tensor(ua,u,gs_hndl1,nelx,nely,nelz,ifld,idir1)

      endif
      if(abs(atyp).gt.1) then
       at = abs(atyp)
       if(nid.eq.0) write(6,*) "Geom averaging in direction ",idir2
       if(nid.eq.0) write(6,*) "nrepeat is ",at
 
       call geom_avg_tensor(ua,u,gs_hndl2,nelx,nely,nelz,ifld,idir2,at)

      endif
      if(atyp.eq.1) then
       if(nid.eq.0) write(6,*) "no averaging"
      endif         

      return
      end
c-----------------------------------------------------------------------
      subroutine avg_tensor_wrapper(u,gs_hndl1,gs_hndl2,nelx,nely,nelz
     $                          ,ifld,idir1,idir2,atyp)
      include 'SIZE'
      include 'TOTAL'

      real u(lx1,ly1,lz1,lelt)
c
      real w1(lx1,ly1,lz1,lelt)
      integer nt

      nt = lx1*ly1*lz1*nelt

      call avg_tensor(w1,u,gs_hndl1,gs_hndl2,nelx,nely,nelz,ifld
     $            ,idir1,idir2,atyp)

      call rzero(u,nt)

      do i=1,nt
         u(i,1,1,1) = w1(i,1,1,1)
      enddo

      return
      end
c-----------------------------------------------------------------------
c     LINE AVERAGE
c-----------------------------------------------------------------------
c
c     call line_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir)
c
c     ua: averaged field, u: field to average
c
c     idir=1 ==> average over y-z plane i.e. get X-profile.
c     idir=2 ==> average over x-z plane i.e. get Y-profile.
c     idir=3 ==> average over x-y plane i.e. get Z-profile.
c
c-----------------------------------------------------------------------
      subroutine line_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir)
      include 'SIZE'
      include 'TOTAL'
      real u (lx1,ly1,lz1,lelt)
      real ua(lx1,ly1,lz1,lelt)
      integer gs_hndl,e,ex,ey,ez,eg
c     common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
c     integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      n   = nx1*ny1*nz1*nel

      call rzero(ua,n)

      if (gs_hndl.eq.0) then

      if(idir.eq.1) call set_gs_x_hndl_line(gs_hndl,nelx,nely,nelz,ifld)
      if(idir.eq.2) call set_gs_y_hndl_line(gs_hndl,nelx,nely,nelz,ifld)
      if(idir.eq.3) call set_gs_z_hndl_line(gs_hndl,nelx,nely,nelz,ifld)

      endif

c     VERIFIED global numbering
c     do i=1,n
c         ua(i,1,1,1) = glo_num(i,1,1,1)
c     enddo

      call copy(ua,bm1,n)                 ! Set the averaging weights
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weights over columns
 
      do i=1,n                            ! ua = (w_j*u_j)/( sum_i w_i)
         ua(i,1,1,1) = bm1(i,1,1,1)*u(i,1,1,1)/ua(i,1,1,1)
      enddo
 
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weighted values

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_x_hndl_line(gs_avg_hndl,nelx,nely,nelz,ifld)
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       ex_g = ey       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points along x
       do j=1,ny1
       do i=1,nx1
c         glo_num(i,j,k,e) = ex
          glo_num(i,j,k,e) = i + (ex-1)*(nx1-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_y_hndl_line(gs_avg_hndl,nelx,nely,nelz,ifld)
c     Set the y-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       ex_g = (ez-1)*nelx+ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-z plane
       do j=1,ny1
       do i=1,nx1
c         glo_num(i,j,k,e) = ey
          glo_num(i,j,k,e) = j + (ey-1)*(ny1-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_z_hndl_line(gs_avg_hndl,nelx,nely,nelz,ifld)
c     Set the z-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)            
       ex_g = ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-y plane
       do j=1,ny1
       do i=1,nx1
c         glo_num(i,j,k,e) = ez
          glo_num(i,j,k,e) = k + (ez-1)*(nz1-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
c
c     PLANAR AVERAGE
c     Written by Ketan Mittal
c
c-----------------------------------------------------------------------
c
c     idir=1 ==> average over x direction
c     idir=2 ==> average over y direction
c     idir=3 ==> average over z direction
c
c-----------------------------------------------------------------------
      subroutine plane_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir)
      include 'SIZE'
      include 'TOTAL'
      real u (lx1,ly1,lz1,lelt)
      real ua(lx1,ly1,lz1,lelt)
      integer gs_hndl,e,ex,ey,ez,eg
c
c     This routine does planar averaging for 'u' and outputs 'ua'
c     for box type meshes with structure - nelx x nely x nelz.
c
c     Input: u       - variable to be averaged
c            gs_hndl - handle for gs_setup            
c            nelx    - number of elements in x-direction
c            nely    - number of elements in y-direction
c            nelz    - number of elements in z-direction
c            ifld    - 1 for velocity, 2 for passive-scalar
c            idir    - direction for averaging, 1-x,2-y,3-z
c
c     Output ua      = u averaged in direction idir
c
c     TYPICAL USAGE:
c
c     integer gs_avg_hndl
c     save    gs_avg_hndl
c     data    gs_avg_hndl / 0 /
c     real vxa(lx1,ly1,lz1,lelt)
c     real vya(lx1,ly1,lz1,lelt)
c     real vza(lx1,ly1,lz1,lelt)
c     nelx = 18
c     nely = 12
c     nelz = 10
c     ifld = 1  !velocity field
c     idir = 2  !y_direction
c
c     call plane_avg_tensor(vxa,vx,gs_avg_hndl,nelx,nely,nelz,ifld,idir)
c     call plane_avg_tensor(vya,vy,gs_avg_hndl,nelx,nely,nelz,ifld,idir)
c     call plane_avg_tensor(vza,vz,gs_avg_hndl,nelx,nely,nelz,ifld,idir)

      nelxy = nelx*nely
      nelyz = nely*nelz
      nelzx = nelz*nelx

      if (gs_hndl.eq.0) then
       if(idir.eq.1) call set_gs_x_hndl_pl(gs_hndl,nelx,nelyz,ifld)
       if(idir.eq.2) call set_gs_y_hndl_pl(gs_hndl,nelx,nely,nelz,ifld)
       if(idir.eq.3) call set_gs_z_hndl_pl(gs_hndl,nelxy,ifld)
      endif

      nel = nelfld(ifld)
      n   = nx1*ny1*nz1*nel

      call copy(ua,bm1,n)              ! Set the averaging weights
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weights over columns

      do i=1,n                          ! ua = (w_j*u_j)/( sum_i w_i)
         ua(i,1,1,1) = bm1(i,1,1,1)*u(i,1,1,1)/ua(i,1,1,1)
      enddo

      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weighted values

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_x_hndl_pl(gs_avg_hndl,nelx,nelyz,ifld)
c     Set the x-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelyz,nelx
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nelyz,1)
       ex_g = ey       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the y-z plane
       do j=1,ny1
       do i=1,nx1
          glo_num(i,j,k,e) = j+ny1*(k-1) + ny1*nz1*(ex_g-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_y_hndl_pl(gs_avg_hndl,nelx,nely,nelz,ifld)
c     Set the y-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelyz,nelx
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)            
       ex_g = (ez-1)*nelx+ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-z plane
       do j=1,ny1
       do i=1,nx1
           glo_num(i,j,k,e) = k+nz1*(i-1) + nx1*nz1*(ex_g-1) 
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_z_hndl_pl(gs_avg_hndl,nelxy,ifld)
c     Set the z-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelxy,1,1)
       ex_g = ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-y plane
       do j=1,ny1
       do i=1,nx1
          glo_num(i,j,k,e) = i+nx1*(j-1) + nx1*ny1*(ex_g-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
c
c GEOMETRIC AVERAGES over repeating features in domain
c
c-----------------------------------------------------------------------
      subroutine geom_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir
     $     ,nrepeat)
      include 'SIZE'
      include 'TOTAL'
      real u (lx1,ly1,lz1,lelt)
      real ua(lx1,ly1,lz1,lelt)
      integer gs_hndl,e,ex,ey,ez,eg
      integer nrepeat
      real onebyn

      if(nrepeat.eq.0) call exitt

      if (gs_hndl.eq.0) then
       if (idir.eq.1)
     $      call set_gs_x_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
       if (idir.eq.2)
     $      call set_gs_y_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
       if (idir.eq.3)
     $      call set_gs_z_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
      endif

      nel = nelfld(ifld)
      n   = nx1*ny1*nz1*nel

      call copy(ua,bm1,n)                 ! Set the averaging weights
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weights over columns

      do i=1,n                          ! ua = (w_j*u_j)/( sum_i w_i)
         ua(i,1,1,1) = bm1(i,1,1,1)*u(i,1,1,1)/ua(i,1,1,1)
      enddo

      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weighted values

c     onebyn = 1/real(nrepeat)
c     call copy(ua,u,n)
c     call fgslib_gs_op(gs_hndl,ua,1,1,0)
c     if(nid.eq.0) write(6,*) "1/nrepeat is", onebyn 
c     do i=1,n
c        ua(i,1,1,1) = ua(i,1,1,1)*onebyn
c     enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_x_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
c     Set the x-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)

      integer nrepeat
      integer*8 glo_num
      integer*8 e_num,lx,ly,lpl,lb4
      integer erepeat

      nel = nelfld(ifld)
      erepeat = int(nelx/nrepeat)
      lx  = nelx*(nx1-1)+1
      ly  = nely*(ny1-1)+1
      lz  = nelz*(nz1-1)+1
      lpl = ly*lz

      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       e_num = mod1(ex,erepeat) 
       do k=1,nz1
       do j=1,ny1
       do i=1,nx1
          lb4=      lpl*(i+(e_num-1)*(nx1-1)-1) 
          lb4= lb4 + ly*(k+(ez   -1)*(nz1-1)-1)
          glo_num(i,j,k,e)=lb4+j+(ey-1)*(ny1-1) 
       enddo
       enddo
       enddo
      enddo

      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_y_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
c     Set the y-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)

      integer nrepeat
      integer*8 glo_num
      integer*8 e_num,lx,ly,lpl,lb4
      integer erepeat

      nel = nelfld(ifld)
      erepeat = int(nely/nrepeat)

      lx  = nelx*(nx1-1)+1
      ly  = nely*(ny1-1)+1
      lz  = nelz*(nz1-1)+1
      lpl = lx*lz

      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       e_num = mod1(ey,erepeat) 
       do k=1,nz1
       do j=1,ny1
       do i=1,nx1
          lb4=      lpl*(j+(e_num-1)*(ny1-1)-1) 
          lb4= lb4 + lx*(k+(ez   -1)*(nz1-1)-1)
          glo_num(i,j,k,e)=lb4+i+(ex-1)*(nx1-1) 
       enddo
       enddo
       enddo
      enddo

      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_z_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
c     Set the z-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)

      integer nrepeat
      integer*8 glo_num
      integer*8 e_num,lx,ly,lpl,lb4
      integer erepeat

      nel = nelfld(ifld)
      erepeat = int(nelz/nrepeat)

      lx  = nelx*(nx1-1)+1
      ly  = nely*(ny1-1)+1
      lz  = nelz*(nz1-1)+1
      lpl = lx*ly

      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       e_num = mod1(ez,erepeat) 
       do k=1,nz1
       do j=1,ny1
       do i=1,nx1
          lb4=      lpl*(k+(e_num-1)*(nz1-1)-1) 
          lb4= lb4 + lx*(j+(ey   -1)*(ny1-1)-1)
          glo_num(i,j,k,e)=lb4+i+(ex-1)*(nx1-1) 
       enddo
       enddo
       enddo
      enddo

      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
