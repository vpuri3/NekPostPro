#!/bin/bash
##----------------------------------------------------##
# runs nek cases in succession
#
# INPUT: $1: case name
#        $2: folder base name
#        $3: # of folder to start from
#        $4: # of jobs to run
#
# EXAMPLE
#        $ ./autorun smoothWavyWall r 7 9
# will execute 9 consecutive runs of case smoothWavyWall
# and save them in folders r7,r8,..,r15
##----------------------------------------------------##

# enter the following variables in run.conf

#  email="vpuri3@illinois.edu" # email log after queuing
#  res="restart0.f00001"       # name of restart file
#  rsfx="0.f00001"             # suffix of output file to restart from.
#                              #      if "0.f00000" then restarts from
#                              #      last file in directory.
#  bsfx="0.f00001"             # suffix of output file to read budgets from.
#                              #      if "0.f00000" don't read budgets.
#  sub="my_nekqsub"            # job submission script
#  nnodes="256"                # # of nodes

##-------------------------------------------------------------------------##
##-------------------------------------------------------------------------##
[ -f ./run.conf ] && source run.conf || exit 1

case=$1
base=$2
num=$3
njobs=$4

me=$(whoami)

dir=$PWD
log=$dir/run.log

function send_log { mail -s "$case autorun" $email < $log; }

function abort {
    echo "ABORT:" "$msg" |& tee -a $log
    send_log; exit 1
}

if [ ! -f $log ]; then
    touch $log
fi
						              
echo "######################################################"     |& tee -a $log
echo "######################################################"     |& tee -a $log
echo "######################################################"     |& tee -a $log
echo $(date -R)                                                   |& tee -a $log
echo "Starting new session in directory $dir."                    |& tee -a $log
echo "Running case $case from $base$num $njobs times."            |& tee -a $log
echo "Storing log in $log."                                       |& tee -a $log
#
echo "from run.conf:"                                             |& tee -a $log
echo "email  is $email"                                           |& tee -a $log
echo "res    is $res"                                             |& tee -a $log
echo "rsfx   is $rsfx"                                            |& tee -a $log
echo "bsfx   is $bsfx"                                            |& tee -a $log
echo "sub    is $sub"                                             |& tee -a $log
echo "nnodes is $nnodes"                                          |& tee -a $log
echo "fresh  is $fresh"                                           |& tee -a $log
#
findrsfx=false
if [ "$rsfx" = "0.f00000" ]; then
    findrsfx=true
    echo "rsfx=$rsfx. Restart from last output file."             |& tee -a $log
fi

budgets=true
if [ "$bsfx" = "0.f00000" ]; then
    budgets=false
    echo "bsfx=$bsfx. No budgets."                                |& tee -a $log
fi

for ((i=1; i<=$njobs; i++)); do
    echo "#------------------------------------------------#"     |& tee -a $log
    echo "#------------------ RUN $i ----------------------#"     |& tee -a $log
    echo "#------------------------------------------------#"     |& tee -a $log
    echo $(date -R)                                               |& tee -a $log

#===============================================================================
#   Organization
#===============================================================================
    dir0=$dir/$base$num
    if [ $i = 1 ]; then
	dir1=$dir0
	echo "starting from $dir1"                                |& tee -a $log
    else
	num=$((num+1))
	dir1=$dir/$base$num

	# copying directories.
	echo "copying $dir0 to $dir1"                             |& tee -a $log
	cp -r $dir0 $dir1                                         |& tee -a $log
        [ $? != 0 ] && msg="cant cp $dir1 -> $dir0" && abort
    fi

    cd  $dir1

#===============================================================================
#   updating restart
#===============================================================================
    echo "removing old logs and updating restart"                 |& tee -a $log
    rm *.cobaltlog *.error *.output *log* *out*

    if [ "$fresh" = false ]; then
        if [ ! -f $dir0/$case$"0.f"* ]; then
            msg="$dir0 does not have output files"; abort
        fi
        # get restart suffix
        if [ "$findrsfx" = true ]; then
            echo "finding latest output file in $dir1"            |& tee -a $log
            rsfx=$(ls -t $case"0.f"* | head -1)
            rsfx=${rsfx:${#rsfx}-8:8}
            echo "latest output file is $case$rsfx."              |& tee -a $log
        fi

        mv -v $case$rsfx $res                                     |& tee -a $log

    else
	fresh=false
    fi

    rm $case"0.f"*
#===============================================================================
#   checks
#===============================================================================
    echo "restarting from $res"                                   |& tee -a $log
    head -c 130 $res                                              |& tee -a $log

    [ $? != 0 ] msg="problem with $res" && abort
    echo -e "\n"                                                  |& tee -a $log
    if [ "$budgets" = true ]; then
        echo "reading budgets from i##$case$bsfx"                 |& tee -a $log
        head -c 130 i13$case$bsfx                                 |& tee -a $log
        [ $? != 0 ] msg="problem with i13$case$bsfx" && abort
        echo -e "\n"                                              |& tee -a $log
     fi

#===============================================================================
# compiling
#===============================================================================
    if [ $i = 1]; then
    	echo "compiling..."                                       |& tee -a $log
    	echo "using makenek " $(which makenek)                    |& tee -a $log
    	makenek $case                                              >>  /dev/null
        [ ! -f $dir1/nek5000 ] && msg="compilation failed" && abort
        echo "compilation successful"                             |& tee -a $log
    fi

#===============================================================================
#   queuing and running
#===============================================================================
    ./$sub $case $nnodes                                          |& tee -a $log
    [ $? != 0 ] &&msg="could not queue job" && abort
    echo "successfully queued job"                                |& tee -a $log
    sleep 10
    qstat --header JobId:User:RunTime:WallTime:State:Location     |& tee -a $log

    sleep 60
    j=0
    while [ ! -f $dir1/logfile ]; do
	echo "waiting in queue"                                   |& tee -a $log
	qstat --header JobId:RunTime:State:Location -u $me        |& tee -a $log
	j=$((j+1))
	[ "$j" -gt 20 ] && msg="spent 60 mins in queue" && abort
	sleep 300
    done
   
    echo "job is running"                                         |& tee -a $log
 
    sleep 300
    dead=$(tail logfile)
    if echo $dead | grep -Fq "dying"; then
	msg="job died before its time"; abort
    fi

    echo "all is good. goodnight."                                |& tee -a $log
    send_log
    sleep $(simTime-300)
    echo $(date -R)                                               |& tee -a $log
    [ ! $i = $njobs ] && echo "long time no see?"                 |& tee -a $log
done
