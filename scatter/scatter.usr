c-----------------------------------------------------------------------
c
c scatter boundary data in adjacent elements
c
c-----------------------------------------------------------------------
      subroutine sctr(g,d,b)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real g(lx1,ly1,lz1,lelt) ! field to project
      real d(lx1,ly1,lz1,lelt) ! distance to wall
      character*3 b

      integer ifld,nel,n,nface
      integer i ,j ,k ,e,f,ipass
     $       ,i0,j0,k0
     $       ,i1,j1,k1
     $       ,ii,jj,kk
      real tol

      ifld = 1
      nel  = nelfld(ifld)
      n    = lx1*ly1*lz1*nel
      b    = 'W  '
      tol  = 1e-12

c distance to BC
c     call rzero(d,n)
c     call cheap_dist(d,ifld,b)

c project data in coordinate direction

      do ipass=1,100
        do e=1,nel
        do k=1,lz1
        do j=1,ly1
        do i=1,lx1
          if(d(i,j,k,e).lt.tol) goto 111 ! wall point - do nothing
          i0=max(  1,i-1)                ! bounding box
          j0=max(  1,j-1)
          k0=max(  1,k-1)
          i1=min(lx1,i+1)
          j1=min(ly1,j+1)
          k1=min(lz1,k+1)
          call sctr_idx(ii,jj,kk,i0,j0,k0,i1,j1,k1,i,j,k,e,d)
          g(i,j,k,e) = g(ii,jj,kk,e)
 111      continue
        enddo
        enddo
        enddo
        enddo
        call fgslib_gs_op(gsh_fld(ifld),g,1,4,0) ! max over all elements
      enddo

      ifvo  = .true.
      ifpo  = .false.
      ifto  = .false.
      ifxyo = .true.
      call outpost(d,g,vz,pr,t,'dst')

      return
      end
c-----------------------------------------------------------------------
      subroutine sctr_idx(ii,jj,kk,i0,j0,k0,i1,j1,k1,i,j,k,e,d)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer i ,j ,k ,e
     $       ,ii,jj,kk
     $       ,i0,j0,k0
     $       ,i1,j1,k1

      real d(lx1,ly1,lz1,lelv),dd

      ii = i0
      jj = j
      kk = k
      dd = d(ii,jj,kk,e)

      if(dd.gt.d(i1,j,k,e)) then
        ii = i1
        jj = j
        kk = k
        dd = d(ii,jj,kk,e)
      endif
      if(dd.gt.d(i,j0,k,e)) then
        ii = i
        jj = j0
        kk = k
        dd = d(ii,jj,kk,e)
      endif
      if(dd.gt.d(i,j1,k,e)) then
        ii = i
        jj = j1
        kk = k
        dd = d(ii,jj,kk,e)
      endif
      if(dd.gt.d(i,j,k0,e)) then
        ii = i
        jj = j 
        kk = k0
        dd = d(ii,jj,kk,e)
      endif
      if(dd.gt.d(i,j,k1,e)) then
        ii = i
        jj = j 
        kk = k1
        dd = d(ii,jj,kk,e)
      endif

      return
      end
c-----------------------------------------------------------------------
